"use strict";(self.webpackChunkgtechnadocs=self.webpackChunkgtechnadocs||[]).push([[9931],{4484:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"projectupdate","title":"Current Setup","description":"1. Docusaurus on GitHub Pages:","source":"@site/docs/projectupdate.md","sourceDirName":".","slug":"/projectupdate","permalink":"/gtechnadocs/docs/projectupdate","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{}}');var i=s(4848),r=s(8453);const l={},o="Current Setup",c={},a=[];function d(e){const n={code:"code",h1:"h1",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"current-setup",children:"Current Setup"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Docusaurus on GitHub Pages"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"I successfully set up Docusaurus on GitHub Pages to test the platform online instead of just locally."}),"\n",(0,i.jsxs)(n.li,{children:["I chose GitHub Pages because it was easier than using our servers, especially since ",(0,i.jsx)(n.code,{children:"devapp.gtechna.net"})," was often down when I tried working with it."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Strapi Installation"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"I installed Strapi locally to better understand how it integrates with Docusaurus."}),"\n",(0,i.jsxs)(n.li,{children:["Strapi runs as a local server on my machine, and I access its admin panel through a browser (",(0,i.jsx)(n.code,{children:"http://localhost:1337/admin"}),"). The project files are on GitHub to share the setup and ensure version control, but the application itself only works locally unless explicitly deployed to a remote server."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Possible Future Deployment"}),":","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"While I\u2019m currently running Strapi locally, it can be deployed to a shared server or cloud platform (e.g., AWS, DigitalOcean) for team-wide access."}),"\n",(0,i.jsx)(n.li,{children:"I don\u2019t know if there are consequences to think about regarding this possible setup, especially since documentation for some clients will be hosted on-premise and for others on our AWS environment."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Bridge Script"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"I wrote a JavaScript script that acts as a bridge between Strapi and Docusaurus."}),"\n",(0,i.jsxs)(n.li,{children:["Here's what it does:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Fetches content"}),": It uses Strapi\u2019s API to retrieve the content I manage in Strapi."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Converts content"}),": The script converts the data into Markdown files, complete with frontmatter metadata (e.g., title, slug)."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Saves to Docusaurus"}),": These Markdown files are saved into the appropriate folders in the Docusaurus project."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Static Site Generation"}),": Once the files are in place, Docusaurus builds a static site for the documentation."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h1,{id:"key-tools-and-their-roles",children:"Key Tools and Their Roles"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Strapi"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"It\u2019s a headless CMS, meaning it\u2019s a back-end content manager with no direct connection to the front-end."}),"\n",(0,i.jsx)(n.li,{children:"While Strapi is designed to make content management easy for non-technical users, that\u2019s not my main focus."}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Why I chose it"}),":","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"It seemed like a good solution for managing multiple versions of content (e.g., English/French) and assets (images, videos)."}),"\n",(0,i.jsx)(n.li,{children:"I also thought it might provide a WYSIWYG way to organize content, but it doesn\u2019t really work that way."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"How it works"}),":","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:'You define content types (e.g., "documentation pages," "blog posts") in Strapi.'}),"\n",(0,i.jsx)(n.li,{children:"Then, you map those content types to specific folders in Docusaurus via the bridge script."}),"\n",(0,i.jsxs)(n.li,{children:["The structure of the documentation site needs to be planned in advance, which involves:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Organizing Docusaurus folders and scripts."}),"\n",(0,i.jsx)(n.li,{children:"Defining content types in Strapi."}),"\n",(0,i.jsx)(n.li,{children:"Writing and maintaining the bridge script to connect the two."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Docusaurus"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"A static site generator that builds the front-end documentation site."}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Plugins"}),":","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"i18n (Internationalization)"}),": This plugin handles translations by associating content with language-specific versions. For example, you create a folder for each language (",(0,i.jsx)(n.code,{children:"/en/"}),", ",(0,i.jsx)(n.code,{children:"/fr/"}),"), and Docusaurus displays the appropriate version based on user settings. The i18n plugin organizes these versions automatically, but it requires properly structured content to work seamlessly."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Algolia Search"}),": Enhances search functionality by indexing your documentation and returning fast, relevant results. It works by:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Crawling your documentation site to create an index."}),"\n",(0,i.jsx)(n.li,{children:"Using this index to provide accurate search results in real-time."}),"\n",(0,i.jsx)(n.li,{children:"The integration involves setting up an account with Algolia, configuring their crawler to suit your site, and updating your site with the necessary API keys and configuration files."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h1,{id:"challenges-and-complexities",children:"Challenges and Complexities"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Iterative Content Structure"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"One challenge is that the content isn\u2019t fully developed yet, making it hard to plan the structure in advance."}),"\n",(0,i.jsx)(n.li,{children:"As the content evolves, the bridge script will likely need several iterations to accommodate changes."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Managing Multiple Documentation Versions"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"We discussed creating different versions of the documentation website for specific clients or internal use, rather than managing content display through roles."}),"\n",(0,i.jsxs)(n.li,{children:["This approach impacts both Strapi and the bridge script:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Strapi"}),": Needs a clear system to classify content (e.g., tags or fields for version or client)."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Bridge Script"}),": Must dynamically fetch and organize content for each version, increasing complexity."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Sidebar Automation"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The content of the sidebars in Docusaurus isn\u2019t as automated as it could be."}),"\n",(0,i.jsx)(n.li,{children:"For now, I have to define the sidebar manually, which adds some extra overhead. I\u2019m sure this feels minor to a developer, but to me, writing scripts is not like breathing!"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Algolia Search Setup"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Setting up Algolia is an involved process. While I might be able to configure it on the current setup with GitHub Pages, it\u2019s complex enough that it should be done by someone with more expertise."}),"\n",(0,i.jsx)(n.li,{children:"Additionally, the setup would need to be redone when we move the site to our servers, making it a task better suited for later in the project timeline."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Autonomy vs. Complexity"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"I\u2019m aiming to stay as independent as possible to avoid delays, but there are limits to my technical"}),"\n"]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>o});var t=s(6540);const i={},r=t.createContext(i);function l(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);